@page "/PassRecovery"
@layout EmptyLayout
@using SimpleExpenseManagement.UI.Models.Authentication
@inject SimpleExpenseManagement.UI.Authentication.IAuthenticationService  AuthService
@inject NavigationManager NavManager
@using Lookif.UI.Component.JS
@using Newtonsoft.Json

@attribute [AllowAnonymous]




    <div class="Container-fluid">
        <div class="" style="background-image:url(images/Login/wave.png); background-size:cover; justify-content: center; height:100vh; width:100vw;">
            <div class="d-flex p-2 ">
                <div class="background-image row col-xl-10 my-4 mx-auto" style=" height: 90vh;width: 90vw;  border-radius: 8px;">
                    <div class="row justify-content-around " style="min-height: 89vh; width: inherit;">
                        <div class="col-xl-5 col-lg-6 col-md-12 col-sm-12 col-md-12 py-5 ">
                            <div class="form border mx-5 my-5" align="right" dir="rtl" style="background-color: white; border-radius: 8px; box-shadow: 5px 5px gainsboro;">
                                <p class="my-3" style="text-align: center;">فراموشی رمز  </p>
                                <EditForm Model=_model OnValidSubmit="ExecutePassRecovery" class="validate-form">
                                    @*@if (ShowAuthenticationError)
                                    {
                                        <div class="alert alert-danger" role="alert">
                                            <p>@authenticationErrorText</p>
                                        </div>
                                    }*@
                                    <div class="mb-3 px-5">
                                        <label for="username" class="form-label ">نام کاربری</label>
                                        <div class="input-group validate-input">
                                            <span class="input-group-text MyRightFont" id="basic-addon1"><i class="fa fa-user icon"></i></span>

                                            <InputText class="form-control MyLeftFont" placeholder="نام کاربری"
                                                       aria-label="Username" aria-describedby="basic-addon1" @bind-Value="_model.UserName" />
                                            <ValidationMessage For="@(()=>_model.UserName)" />
                                        </div>
                                    </div>
                                    <div class="mb-3 px-5">
                                        <label for="username" class="form-label ">آدرس ایمیل</label>
                                        <div class="input-group validate-input">
                                            <span class="input-group-text MyRightFont" id="basic-addon2"><i class="fas fa-envelope"></i></span>

                                            <InputText class="form-control MyLeftFont" placeholder="آدرس ایمیل"
                                                       aria-label="Username" aria-describedby="basic-addon2" @bind-Value="_model.Email" />
                                            <ValidationMessage For="@(()=>_model.Email)" />
                                        </div>
                                    </div>

                                    <div class="  mx-auto col-6 " >
                                        <button type="submit" class="btn btn-primary rounded-pill" style="margin-right:7%;">ارسال رمز جدید</button>
                                    </div>
                                </EditForm>
                                <div class="d-flex flex-row bd-highlight mb-3" style="padding-right:20%;">

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
 


@code {
    private PassRecoveryUserModel _model = new();

    //private bool ShowAuthenticationError = false;
    //private string authenticationErrorText = "";
    //protected async override Task OnInitializedAsync()
    //{
    //    await AuthService.Logout();
    //}

    private async Task ExecutePassRecovery()
    {
        //ShowAuthenticationError = false;
          await AuthService.PassRecoveryTask(_model);

        //if (result.IsSuccess && result.access_token != default)
        //{
        //    NavManager.NavigateTo("/");
        //}
        //else
        //{
        //    authenticationErrorText = result.Error;
        //    ShowAuthenticationError = true;
        //}
    }
}
